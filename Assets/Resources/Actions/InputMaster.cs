//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Resources/Actions/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""917305ef-3698-4d09-a46b-e2bb49b3eee0"",
            ""actions"": [
                {
                    ""name"": ""Proceed"",
                    ""type"": ""Button"",
                    ""id"": ""bc30e69d-9b04-4b07-bdf2-06b5cac96f2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Go Back"",
                    ""type"": ""Button"",
                    ""id"": ""784ccbc7-8d94-4339-94da-830594d99439"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Go Right"",
                    ""type"": ""Button"",
                    ""id"": ""35de2538-d46a-44ac-a9b8-a83df3bd6085"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Go Left"",
                    ""type"": ""Button"",
                    ""id"": ""b54dfb28-f839-48df-9134-004606375f22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Go Down"",
                    ""type"": ""Button"",
                    ""id"": ""d10b042b-73c0-441c-be7f-76fe0199b948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Go Up"",
                    ""type"": ""Button"",
                    ""id"": ""a16989f8-8b1a-45c5-9d65-392e406653ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pan Left"",
                    ""type"": ""Button"",
                    ""id"": ""c9572160-c372-476f-9d6a-09aff715076a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pan Right"",
                    ""type"": ""Button"",
                    ""id"": ""970b2fef-acf8-416b-b1ac-ef1ecc270c2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""1b2a4d07-33fa-4ccd-ba82-b247ae01eaab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c86f2e53-538b-4999-8fbf-ad8a56c1d214"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Proceed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c6d57af-e18f-41d5-95d7-ea91e76fac5b"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69d5f9e8-29ce-4a10-a9f4-423dc5d35ca0"",
                    ""path"": ""<DualShockGamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22264f36-eefd-43eb-a55d-317690ba1e25"",
                    ""path"": ""<DualShockGamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4661ce4d-49cf-42f3-b458-4121aaf5b4ea"",
                    ""path"": ""<DualShockGamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aeb4a47f-f28b-49e7-a045-44b606621231"",
                    ""path"": ""<DualShockGamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77294a9d-71db-4328-911b-0f0725ae59bc"",
                    ""path"": ""<DualShockGamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cab4382-3cb2-4cb7-b338-9375206f5082"",
                    ""path"": ""<DualShockGamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c39deaa6-ea3e-49ce-9f9a-6f6a7ffa41d3"",
                    ""path"": ""<DualShockGamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f79bf0b-7cee-43c5-a366-5e918f11c5e3"",
                    ""path"": ""<DualShockGamepad>/leftStick/up"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Go Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fa9aa0e-0428-4319-9b2e-032421f533e7"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Pan Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2acbafd-6c1e-4250-b8a8-7d0b281d306b"",
                    ""path"": ""<DualShockGamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Pan Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fbc3054-2a60-46ce-bc9c-d192a5606d29"",
                    ""path"": ""<DualShockGamepad>/start"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Playstation Control Scheme"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Playstation Control Scheme"",
            ""bindingGroup"": ""Playstation Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Proceed = m_Menu.FindAction("Proceed", throwIfNotFound: true);
        m_Menu_GoBack = m_Menu.FindAction("Go Back", throwIfNotFound: true);
        m_Menu_GoRight = m_Menu.FindAction("Go Right", throwIfNotFound: true);
        m_Menu_GoLeft = m_Menu.FindAction("Go Left", throwIfNotFound: true);
        m_Menu_GoDown = m_Menu.FindAction("Go Down", throwIfNotFound: true);
        m_Menu_GoUp = m_Menu.FindAction("Go Up", throwIfNotFound: true);
        m_Menu_PanLeft = m_Menu.FindAction("Pan Left", throwIfNotFound: true);
        m_Menu_PanRight = m_Menu.FindAction("Pan Right", throwIfNotFound: true);
        m_Menu_Start = m_Menu.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Proceed;
    private readonly InputAction m_Menu_GoBack;
    private readonly InputAction m_Menu_GoRight;
    private readonly InputAction m_Menu_GoLeft;
    private readonly InputAction m_Menu_GoDown;
    private readonly InputAction m_Menu_GoUp;
    private readonly InputAction m_Menu_PanLeft;
    private readonly InputAction m_Menu_PanRight;
    private readonly InputAction m_Menu_Start;
    public struct MenuActions
    {
        private @InputMaster m_Wrapper;
        public MenuActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Proceed => m_Wrapper.m_Menu_Proceed;
        public InputAction @GoBack => m_Wrapper.m_Menu_GoBack;
        public InputAction @GoRight => m_Wrapper.m_Menu_GoRight;
        public InputAction @GoLeft => m_Wrapper.m_Menu_GoLeft;
        public InputAction @GoDown => m_Wrapper.m_Menu_GoDown;
        public InputAction @GoUp => m_Wrapper.m_Menu_GoUp;
        public InputAction @PanLeft => m_Wrapper.m_Menu_PanLeft;
        public InputAction @PanRight => m_Wrapper.m_Menu_PanRight;
        public InputAction @Start => m_Wrapper.m_Menu_Start;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Proceed.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnProceed;
                @Proceed.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnProceed;
                @Proceed.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnProceed;
                @GoBack.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoBack;
                @GoBack.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoBack;
                @GoBack.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoBack;
                @GoRight.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoRight;
                @GoRight.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoRight;
                @GoRight.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoRight;
                @GoLeft.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoLeft;
                @GoLeft.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoLeft;
                @GoLeft.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoLeft;
                @GoDown.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoDown;
                @GoDown.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoDown;
                @GoDown.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoDown;
                @GoUp.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoUp;
                @GoUp.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoUp;
                @GoUp.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoUp;
                @PanLeft.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPanLeft;
                @PanLeft.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPanLeft;
                @PanLeft.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPanLeft;
                @PanRight.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPanRight;
                @PanRight.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPanRight;
                @PanRight.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPanRight;
                @Start.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Proceed.started += instance.OnProceed;
                @Proceed.performed += instance.OnProceed;
                @Proceed.canceled += instance.OnProceed;
                @GoBack.started += instance.OnGoBack;
                @GoBack.performed += instance.OnGoBack;
                @GoBack.canceled += instance.OnGoBack;
                @GoRight.started += instance.OnGoRight;
                @GoRight.performed += instance.OnGoRight;
                @GoRight.canceled += instance.OnGoRight;
                @GoLeft.started += instance.OnGoLeft;
                @GoLeft.performed += instance.OnGoLeft;
                @GoLeft.canceled += instance.OnGoLeft;
                @GoDown.started += instance.OnGoDown;
                @GoDown.performed += instance.OnGoDown;
                @GoDown.canceled += instance.OnGoDown;
                @GoUp.started += instance.OnGoUp;
                @GoUp.performed += instance.OnGoUp;
                @GoUp.canceled += instance.OnGoUp;
                @PanLeft.started += instance.OnPanLeft;
                @PanLeft.performed += instance.OnPanLeft;
                @PanLeft.canceled += instance.OnPanLeft;
                @PanRight.started += instance.OnPanRight;
                @PanRight.performed += instance.OnPanRight;
                @PanRight.canceled += instance.OnPanRight;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_PlaystationControlSchemeSchemeIndex = -1;
    public InputControlScheme PlaystationControlSchemeScheme
    {
        get
        {
            if (m_PlaystationControlSchemeSchemeIndex == -1) m_PlaystationControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Playstation Control Scheme");
            return asset.controlSchemes[m_PlaystationControlSchemeSchemeIndex];
        }
    }
    public interface IMenuActions
    {
        void OnProceed(InputAction.CallbackContext context);
        void OnGoBack(InputAction.CallbackContext context);
        void OnGoRight(InputAction.CallbackContext context);
        void OnGoLeft(InputAction.CallbackContext context);
        void OnGoDown(InputAction.CallbackContext context);
        void OnGoUp(InputAction.CallbackContext context);
        void OnPanLeft(InputAction.CallbackContext context);
        void OnPanRight(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
}
